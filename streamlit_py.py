# -*- coding: utf-8 -*-
"""streamlit.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oIIv6z6l6XeFc033q0JkQcptIUZUS4tt
"""

import streamlit as st
import joblib
import numpy as np
import pandas as pd

# Charger le modèle
model = joblib.load("xgboost_model.pkl")

# Titre de l'application
st.title("Prédiction du Prix d'un Bus \U0001f68c")

st.markdown("""
Saisissez les caractéristiques ci-dessous pour prédire le prix d'un bus ainsi que l'erreur estimée.
""")

# Dictionnaires ou listes d’options pour les champs catégoriques
bus_types = ["Type A", "Type B", "Type C", "Type D"]
states = ["OH", "AR", "CA", "TX"]  # à adapter
vehicle_dealers = ["Ohio CAT", "Central States Bus Sales"]  # à adapter
sources = ["META Co-Op", "Arkansas Department of Transformation"]  # à adapter
bus_models = ["Saf-T-Liner C2 Jouley", "Vision"]  # à adapter

# Interface utilisateur : champs de saisie
bus_type = st.selectbox("Bus Type", bus_types)
seating_capacity = st.slider("Seating Capacity", min_value=20, max_value=90, step=1)
state = st.selectbox("State", states)
vehicle_dealer = st.selectbox("Vehicle Dealer", vehicle_dealers)
insurance_premium = st.number_input("Insurance Premium", value=15000.0)
vehicle_age = st.slider("Vehicle Age (years)", 0.0, 20.0, step=0.1)
source = st.selectbox("Source", sources)
purchase_year = st.selectbox("Purchase Year", [2019, 2020, 2021, 2022, 2023])
engine_size = st.slider("Engine Size (cc)", 500, 5000, step=100)
bus_model = st.selectbox("Bus Model", bus_models)

# Création du DataFrame d'entrée
input_data = pd.DataFrame({
    "Bus Type": [bus_type],
    "Seating Capacity": [seating_capacity],
    "State": [state],
    "Vehicle Dealer": [vehicle_dealer],
    "Insurance_Premium": [insurance_premium],
    "Vehicle_Age": [vehicle_age],
    "Source": [source],
    "Purchase Year": [purchase_year],
    "Engine_Size": [engine_size],
    "Bus Model": [bus_model]
})

# Encodage des variables catégoriques (doit correspondre à l'encodage du modèle)
# Pour simplifier : label encoding simulé par ordre dans la liste
input_data["Bus Type"] = input_data["Bus Type"].apply(lambda x: bus_types.index(x))
input_data["State"] = input_data["State"].apply(lambda x: states.index(x))
input_data["Vehicle Dealer"] = input_data["Vehicle Dealer"].apply(lambda x: vehicle_dealers.index(x))
input_data["Source"] = input_data["Source"].apply(lambda x: sources.index(x))
input_data["Bus Model"] = input_data["Bus Model"].apply(lambda x: bus_models.index(x))

# Prédiction
if st.button("Prédire le prix"):
    prediction = model.predict(input_data)[0]
    error_margin = 16645.71  # Valeur RMSE obtenue précédemment
    lower_bound = prediction - error_margin
    upper_bound = prediction + error_margin

    st.success(f"Prix prédit : ${prediction:,.2f}")
    st.info(f"Intervalle estimé : ${lower_bound:,.2f} - ${upper_bound:,.2f} (~±{error_margin:,.0f} $)")

    # Affichage de l'importance des variables (fixée ici)
    st.markdown("### Top 10 Features Importantes")
    feature_importance = {
        "Bus Type": 0.567235,
        "Seating Capacity": 0.074762,
        "State": 0.055022,
        "Vehicle Dealer": 0.048465,
        "Insurance_Premium": 0.044524,
        "Vehicle_Age": 0.040591,
        "Source": 0.038390,
        "Purchase Year": 0.035968,
        "Engine_Size": 0.024993,
        "Bus Model": 0.024530
    }
    importance_df = pd.DataFrame.from_dict(feature_importance, orient='index', columns=['Importance'])
    st.bar_chart(importance_df.sort_values(by='Importance', ascending=False))